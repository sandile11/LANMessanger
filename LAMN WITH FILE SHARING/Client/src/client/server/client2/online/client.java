/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.server.client2.online;

/**
 *
 * @author Sandile Cyber
*/

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sandile Cyber
 */

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sandile Cyber
*/

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Sandile Cyber
 */
public class client extends javax.swing.JFrame {

    /**
     * Creates new form client
     */
    int c=0;
    DatagramSocket  clientSocket,serverSocket, statusSocket,statusSocketR;
    DatagramPacket  sendpacket, statusPacket, receivePacket, statusPacket1;
    byte [] sendArr  = new byte[1024];
    byte [] receiveArr  = new byte[1024];
    String tmp;
    Thread threadSend;
    Thread threadReceive;
    Thread threadStatus;
    public client() throws SocketException {
        initComponents();
        clientSocket = new DatagramSocket();
        statusSocket = new DatagramSocket();
        serverSocket = new DatagramSocket(5001);
        sendpacket = new DatagramPacket(sendArr, sendArr.length);
        receivePacket =  new DatagramPacket(receiveArr, receiveArr.length);
        tmp="";
        receive(jTextArea1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("jTextField1");

        jButton1.setText("send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        System.out.println("we got here at least");
      send(jTextField1,jTextArea1);
              // threadSend.start();

    }                                        

    private void send(JTextField jtf,JTextArea jta){
    
        threadSend = new Thread("send thread"){
            @Override
            public void run() {
                super.run();//To change body of generated methods, choose Tools | Templates.
                String aString ;//= new String(sendArr);
                aString = jtf.getText().toString();
                jta.append(new Date()+" me: "+ aString+"\n");
                //System.out.println("what is up here  "+c);
                sendpacket.setData(aString.getBytes());
                sendpacket.setPort(5002);
                try {
                    sendpacket.setAddress(InetAddress.getByName("localhost"));
                    c++;
                } catch (UnknownHostException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                        //                System.out.println("was the data sent? ");

                    clientSocket.send(sendpacket);
                    System.out.println("data has been sent to server ");
                } catch (IOException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
               jtf.setText("");
            }                    
        };
  
            threadSend.start();
//        
    }
    
    public void sendStatus(int port) throws UnknownHostException{
 
              statusPacket.setPort(port);
              statusPacket.setData("enilno".getBytes());
              statusPacket.setAddress(InetAddress.getByName("localhost"));
        try {
            statusSocket.send(statusPacket);
        } catch (IOException ex) {
            Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
    
    private void receive(JTextArea  jta){
    
  
        threadReceive = new Thread("The receive thread"){
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
                while (true){
                try {
                    System.out.println("waiting to receive the msg");
                    /*this part might seem pointless but don't change
                    some weird will happend if you do
                    */
                      byte [] arr1  = new byte[1024]; 
                    receivePacket =  new DatagramPacket(arr1, arr1.length);
                    
                    serverSocket.receive(receivePacket);
                    
                    tmp = new Date() +"   " +new String(receivePacket.getData())+"\n";
                    
                    if(tmp.contains("enilno")){
                            sendStatus(receivePacket.getPort());
                            jButton1.setText("online");
                            
                    }
                    else if(tmp.contains("enilffo")){
                        jButton1.setText("offline");
                    }
                    
                    jta.append(tmp);
            //        System.out.println("well and done we have received data");
                    System.out.println(new String(receivePacket.getData()));
                } catch (IOException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                
            }    

           
        };
        threadReceive.start();
        threadStatus = new Thread(){
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
        
                while(true){
                    try {
                        statusPacket1.setData("online".getBytes());
                        statusPacket1.setPort(5002);
                        statusSocketR.send(statusPacket1);
                    } catch (IOException ex) {
                        Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                    }   
                }   
            }   
        };
        
        threadStatus.start();
        
        
   
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new client().setVisible(true);
                } catch (SocketException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}


