/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Sandile Cyber
 */
public class client extends javax.swing.JFrame {

    /**
     * Creates new form client
     */
    int c=0;
    DatagramSocket  datagramSocket,datagramSocket1,stateSocket;
    
    DatagramPacket  datagramPacket;
    DatagramPacket datagramPacket1;
    DatagramPacket statepPacket;
    byte [] arr  = new byte[1024];
  //  byte [] arr1  = new byte[1024];
    String tmp;
    Thread send;
    Thread receivetThread,stateThread;
    public client() throws SocketException {
        initComponents();
        datagramSocket = new DatagramSocket();
        datagramSocket1 = new DatagramSocket(5002);
        datagramPacket = new DatagramPacket(arr, arr.length);
        
        tmp="";
        receive(jTextArea1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("jTextField1");

        jButton1.setText("send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("we got here at least");
        send(jTextField1,jTextArea1);
              //  send.start();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void send(JTextField jtf,JTextArea jta){
    
        send = new Thread("send thread"){
            @Override
            public void run() {
                super.run();//To change body of generated methods, choose Tools | Templates.
                String aString ;//= new String(arr);
                aString = jtf.getText().toString();
                jta.append(new Date()+" me: "+ aString+"\n");
                //System.out.println("what is up here  "+c);
                datagramPacket.setData(aString.getBytes());
                datagramPacket.setPort(5001);
                try {
                    datagramPacket.setAddress(InetAddress.getByName("localhost"));
                    System.out.println("setting the port is done");
                    c++;
                } catch (UnknownHostException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                                        System.out.println("attemping to send data ");

                    datagramSocket.send(datagramPacket);
                    System.out.println("the data is theoretically sent");
                } catch (IOException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
               jtf.setText("");
            }                    
        };
    
        
            send.start();
//        
    
    }
    
    private void sendState(DatagramPacket DP) throws IOException{
    
                System.out.println("trying to send stuff back you know");

        DatagramPacket sendStPacket= new DatagramPacket(arr, arr.length);
        sendStPacket.setData("5002o".getBytes());
        sendStPacket.setPort((DP.getPort()-3));
        System.out.println("the port to send to is"+ (DP.getPort()-3));
        sendStPacket.setAddress(DP.getAddress());
        datagramSocket.send(sendStPacket);
        System.out.println("the IP address is "+DP.getAddress().getHostAddress());
        System.out.println("stuff has been sent back man");
    }
    private void receive(JTextArea jta){
    
        receivetThread = new Thread("The receive thread"){
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
                while (true){
                try {
                    System.out.println("waiting to receive the msg");
                    /*this part might seem pointless but don't change
                    some weird will happend if you do
                    */
                    String tmp="";
                     byte [] arr1  = new byte[1024];
                    datagramPacket1 =  new DatagramPacket(arr1, arr1.length);
                    datagramSocket1.receive(datagramPacket1);
                    tmp = new String(datagramPacket1.getData());
                    
                    if(tmp.contains("5002o")){
                            
                            jLabel1.setText("online");
                    //System.out.println(new String(datagramPacket1.getData()));}
                    }
                    else if(tmp.contains("5002f")){
                        jLabel1.setText("offline");
                    }
                    else if(tmp.contains("are you online")){
                        System.out.println("CONTAINS");
                        sendState(datagramPacket1);
                    }
                    else{
                     
                            tmp=new Date() + "   " +tmp +"\n";
                            jta.append(tmp);
                            System.out.println("well and done we have received data");
                        
                            }
                    
                } catch (IOException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                
            }    
        };
        receivetThread.start();
        
        stateThread = new Thread(){
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
            
                
                
            }
        };
   
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new client().setVisible(true);
                } catch (SocketException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
